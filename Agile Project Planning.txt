# AGILE PROJECT PLANNING
------------------------
Properly estimating and prioritizing project requirements is critical when planning projects. 

When managing Agile projects, you need to be able to map out the work necessary for your 
product release.

In this course, you'll learn about vital Agile planning activities including creating personas and wireframing. 

This course also covers the most common Agile estimation techniques used when managing projects such as story points, wideband Delphi, and affinity estimation. 

This course also covers requirements prioritization methods and other Agile project management activities you perform when completing your release plan.

This course is one of a series in the Skillsoft learning path that covers the objectives for the PMI Agile Certified Practitioner (PMI-ACP)Â® exam. PMI-ACP is a registered mark of the 
Project Management Institute, Inc.


--------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Objectives
------------
. identify key considerations for Agile project scoping

. identify best practices for creating personas as part of requirements definition

. identify wireframing best practices for formatting user stories

. identify benefits of story mapping

. recognize Agile estimating techniques

. identify considerations to keep in mind when estimating team velocity

. recognize different customer-valued prioritization methods

. identify the four MoSCoW model categories

. recognize characteristics of Kano models and priority matrices

. identify the key activities that take place in the iteration planning meeting


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Agile Project Planning
------------------------
Agile project planning involves establishing the proper project requirements, conditions of satisfaction, and priorities.

This course covers how to create and prioritize user stories. A key activity for clearly defining customer-centric requirements and features.

You'll also learn about agile estimating techniques, estimating team velocity, and prioritizing user stories and requirements.


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Defining Project Scope and Roadmap
------------------------------------
Two key planning stages in Agile are 

	. release planning and 
	. iteration planning.

At the release planning level, we define the plan for delivering a certain increment of product or business value by a target release date.

Release planning helps stakeholders start to set expectations on what they can start to see within each iteration as they approach the final release.

The key tasks of release planning include:

	. establishing project goals
	. creating user stories
	. prioritizing stories so that the team and stakeholders identify what must be developed
	. estimating stories
	. grouping stories, and 
	. setting a release date.

Iteration planning is sometimes referred to as sprint planning. It defines specific goals for the team in the next iteration.

The key tasks of iteration planning are:

	. confirming user stories and priorities for the next sprint
	. decomposing selected stories into tasks
	. refining estimates and
	. updating requirements if needed and based on new learning.

In Agile planning, we have the concept of the cone of uncertainty.

	Essentially the concept is that there is a decrease of variance overtime and estimates. So as we move forward in a project, we have last project unknowns and our estimates versus 
	actual start to approach each other, and become closer until there is no variance between them.

	Estimates may have been created using historical project data. They're used to create a high to low estimate range, and they vary depending on the type of project.

In Agile planning, we also have the concept of progressive elaboration.

	Progressive elaboration means that the project plan is continuously and constantly modified, detailed and improved.

	Progressive elaboration helps us account for changes in scope or requirements or even priorities.

	Progressive elaboration is performed throughout the project life cycle and it allows the project to be managed to a greater level of detail.

	So as the project evolves, we're actually able to manage better, because we understand more detail about the requirements, about the users and about how they're going to use our 
	product.

In the context of Agile projects, scope is defined as the extent of the work that needs to be completed in order for our project to be considered complete.

	Overtime, scope usually increases. 

	Scope is likely to change over the course of a project because requirements change and because requirements are refined as the project progresses.

	In Agile, we understand and acknowledge this fact. And we don't try to run away from the idea that scope may change as our project progresses.

	When we incorporate learning and feedback, we actually can create better products. Ultimately our goal is to create the best products for our end users and for our stakeholders.

	Scope can be controlled by continually maximizing value for the customer, such as by minimizing waste and increasing effectiveness of teams.

Scope creep is another concept in project management.

	Scope creep is uncontrolled change to a project which can result in delays or higher costs.

	Scope creep should not be confused with controlled change, which is accepted and even encouraged if it adds value for the customer.

	We must avoid scope creep by introducing change in a managed way that considers the impact to other parts of the project and is agreed to by the customer and key stakeholders.

	So what do we do if our budget and schedule are fixed, but we want to introduce a new feature or requirement? We may decide to sacrifice a less valuable feature to make room in 
	the budget and schedule for this one. This is one way to prevent scope creep.

In summary, two key planning stages in Agile are release planning and iteration planning.

* The key tasks of release planning include, 
	. establishing project goals,
	. creating user stories, 
	. prioritizing stories so that the team and stakeholders identify what must be developed, 
	. estimating stories,
	. grouping stories and setting a release date.

* The key tasks of iteration planning are, 
	. confirming user stories and priorities for the next sprint,
	. decomposing selected stories into tasks, 
	. refining estimates and
	. updating requirements if needed and based on new learning.


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Use Cases and Personas
------------------------
* Use cases are common in both software and system engineering and they're part of defining requirements.

	Use cases describe a sequence of activities that provide measurable value to an actor who represents the user.

	You may think of use cases as different scenarios.

	So for example, one use case may be where a user already has an account on the system.

	What happens then?

	Another use case may be where a user is trying to use our system, but they haven't yet established an account.

In this context, actors represent the roles that users may have in relation to a system.

So actors may be persons, organizations, or external systems.

A person may be a user who directly uses the software.

An organization may be an organization that benefits from some reporting or some other feature of the software.

And an external system may be the recipient of some data that our software is sending to it.

	* We use personas in Agile projects as a way to define examples of typical users of our systems.

		They should be concise and visual.

		When we develop personas, we think about certain things such as providing a name, a personality, what their motivation is to use our software, providing professional 
		details, how much they use the technology,etc., and potentially a picture of that person.

		It helps teams to identify personas and to start to create a relationship with them, in order to understand their mindset as they're using our software.

		It may seem interesting to go into details of these personas, however they actually really do help us understand how users are going to use our system, and what things 
		they may be taking into consideration as they'reinteracting with it.

		We may want to use or create more than one persona.

		We implement personas in order to understand exactly what a product may need to do in different scenarios, and how it may need to react when providing different inputs 
		from different personas.

		Creating personas may require community research.

		So, for example, we may have to conduct some focus groups.

		We may have to talk to potential users or even customer support, since they really understand some of the struggles that our users currently have, and product managers, 
		since a part of their job is to understand our customers.

		In order to write effective personas, we don't want to make up personas that don't actually exist.

		We want to base our personas on reality. They should be based on who will actually use and benefit from our software. We also want to develop specific personas sowe want 
		to be able to differentiate between the different personas.

		We also want to define the persona goals.

		Why would they use our system? We may also consider negative personas. If there were some personas that would want our system to fail, or wouldn't want to use our product, 
		what would their motivations and reasons be?

		We may consider creating primary personas and then some secondary ones.

		The primary personas are the ones that will really drive our decision-making in our understanding of the user.

* In summary, use cases and personas help you define requirements. When creating personas, best practices include, basing them on reality, being specific, defining persona goals, including
negative personas, and creating primary and secondary personas.


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Formatting User Stories
-------------------------
It's beneficial to depict user stories visually for team members and stakeholders.

A great way to do this is to use wireframes.

	. Wireframes are also known as page schematics or screen blueprints.

	. Wireframes provide a visual guide and define information hierarchy on a page.

	. Wireframes also make it easier for our user experience designers to plan the layout of a page. And with wireframes, users can interact with the interface before anything's been
 	developed.

	. The benefits of wireframes are many.

		. For example, for clients, wireframes help them obtain a better understanding of our solution.
		. They also provide a format for providing feedback.
		. For product and project managers, wireframes ensure that stakeholders are on the same page.
		. For designers, they can rely on wireframes as blueprints for design visuals in a high-level, low fidelity way.
		. For developers, wireframes can help obtain understanding of technical requirements.

	. There are several best practices to follow when wireframing.

		. First, avoid making wireframes fancy. We want to keep wireframes at a high-level and low fidelity, so that we're not committing to a certain layout.
		. It's interesting, but once we get into designing in a high-level of detail, we start to commit to memory and we start to commit to certain elements on the page.
		. It's harder to detach from a high fidelity design than from a low fidelity wireframe.

	. With wireframes, we also want to gather feedback before we start creating them, and once we've created them in order to continually improve our design.

	. Wireframes also provide us with an opportunity to experiment with different ways of placing things on a page, or different ways of depicting a requirement that a stakeholder has 
	given.

	. You should experiment with the options to ensure the best decisions are made.

	. You should also use story boards when wireframing to help visualize interactions.

Another best practice is to use annotations and notes, in order to note certain things that developers might want to take into consideration, or certain ways that something may need to be 
developed or implemented.

And we always want to provide an explanation with wireframes since they don't stand on their own.

In summary, wireframes are a great way to start to depict our requirements in a visual way. And to ensure that people are on the same page.

Best practices when wireframing include keeping them simple,gathering feedback, experimenting, using storyboards,using annotations and providing explanations with them.


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Using Story Maps
------------------
Story mapping, originally introduced by Jeff Patton, is a powerful, visual way to plan Agile projects.

Story maps are a way to organize and present information, similar to the concept of a roadmap.

However, in story maps, we order users' activities and tasks as they interact with our system.

Story maps depict users' activities overtime or sequentially.

User stories help us to really focus on the user in our planning efforts.

When we put them in the context of a story map, it also helps us focus on business value, since that's what helps us determine priority.

In users' story maps, the horizontal axis shows a high-level overview of the system. Meaning, if we were to read the cards at the very top, we would have a high-level understanding of 
what the system does.

So for example, the blue cards on this diagram may say something like Log In, Enter Banking Information and View Reports. 

We can guess that this is probably some type of financial software.

The horizontal axis is also ordered based on the order of how user suse the system over time. So in the previous example, a user would most likely first log in, then enter banking or 
transaction information and then view reports.

	. The first row of the story map is called the walking skeleton and is considered the minimum working version of the system that can provide value to a user.

	. On the vertical axis of a users' story map, we start to get deeper into additional scenarios, more sophisticated use cases and more robustness.

	. As we go further down the vertical axis, the functionality is less necessary than the top rows.

	. Story mapping has many benefits.

		. First, story mapping helps with knowing what to build first.

		. Story mapping also helps us to build using an iterative approach. It helps us start to see things in terms of building Release 1 based on what's most necessary, and then 
		Release 2, what's necessary for this iteration, and then Release 3, and so forth.

		. Story maps help us to see the scope of a project and then also to plan our releases at a high-level.

		. Story mapping also helps us continue to prioritize the product's backlog, as things may shift in-between releases as we're implementing or executing on the plan.

		. Story mapping also has an open approach to the supporting goals and activities of each story. So for example, when we're looking at how to solve or how to implement
		certain cases, we want to think about things like manual workarounds. What are the different ways that we can implement a requirement that can be the most iterative and 
		open and easiest approach to getting something done?

		. Story mapping allows you to explore those options.

In summary, story maps are a visual planning tool that help you organize and present your project plan.

Story maps help you to identify what to build first, support an iterative approach, identify scope, help in planning releases, help with prioritizing product backlog, and provide an open 
approach.


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Agile Estimating Techniques
-----------------------------
Understanding the different estimating techniques and when to use them is critical for your Agile project success.

There are several estimating techniques to use in Agile, depending on what your estimating goals are. 

	1. Story points, one option, are a tool used by teams to perform relative estimation. By relative, we mean that when we estimate using story points, we're estimating by comparing 
	the relative effort of user stories as compared to each other. 

		. Story points are what we call an arbitrary measure. Which means that an estimate of three or a medium by one team, may mean a completely different thing than an estimate 
		of three or a medium given by another team. 

		. Story points are usually used by Scrum teams, and they express how much effort is required to implement a story or what we call the size of a story. 
	
		. We take three items into consideration when we're coming up with the relative size of a story.

			. Number one, the Level of complexity involved in implementing.

			. Number two, the Level of unknowns or risk. 

			. And number three, the Effort required to implement once we're ready to develop.

	2 . Ideal Days are a measure that can be used instead of story points. And one reason why teams might want to use Ideal Days is that they can be more intuitive than thinking about 
	estimation and points.

		. Ideal Days are units of time, whereas points are an arbitrary measure. They are used to estimate the relative size of user stories, product backlog items, and projects.

		. Ideal days are how many days it will take a single developer to Build, Test, and Release the functionality described by a user story, under the ideal conditions. 

		. Ideal conditions refers to no interruptions, and that all resources are available. 


	3. Another estimating method that can be used to estimate user stories in Agile projects is Relative Sizing.

		. With Relative Sizing, we're expressing the overall size of an item. So for example, we could be using Relative Sizing for users' stories or tasks. 

		. The Absolute value is not considered and what we mean by that is that, it's a very different method of sizing or estimating than saying that something will take exactly 
		one hour, or three hours, etc. 

		. Relative Sizing is a cheap and fast estimation technique, there's not a lot of math involved. There isn't a lot of time involved, either. We really get together the 
		people who are experts on implementation and ask them what the relative complexity is of one story as compared to the others. 

		
	4. Wideband Delphi is another estimation technique, and was developed in the 1940s by RAND Corporations as a forecasting tool.

		. Wideband Delphi is a repeatable process. It's a group estimation technique that is used to estimate effort, and is straightforward to implement.

		. It includes six steps, which are, 

			. scheduling an estimation meeting,

			. describing what the team is estimating, 

			. tasking members to estimate individually, 

			. revealing the individual results, 

			. discussing, and 

			. repeating.

	5. Planning Poker is another commonly used estimation technique by Agile teams. And it's used to determine user story size, as well as to build consensus among team members. 


	6. And finally, Affinity Estimation is a technique used to quickly and easily estimate a large number of user stories and story points. 

		. This is done by quickly categorizing user stories, and then applying estimates to those categories of stories.

		. The participants of the Affinity Estimation meeting are 

			. the Product Owner,

			. the Development Team, and 

			. the Scrum Master. 

In summary

	. Story Points, 
	. Ideal Days, 
	. Relative Sizing, 
	. Wideband Delphi, 
	. Planning Poker,
	. and Affinity Estimation are all estimating techniques you can use in Agile.


------------------------------------------------------------------------------------------------------------------------------------------------------------------




											          





































