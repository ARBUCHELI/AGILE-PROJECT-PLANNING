# AGILE PROJECT PLANNING
------------------------
Properly estimating and prioritizing project requirements is critical when planning projects. 

When managing Agile projects, you need to be able to map out the work necessary for your 
product release.

In this course, you'll learn about vital Agile planning activities including creating personas and wireframing. 

This course also covers the most common Agile estimation techniques used when managing projects such as story points, wideband Delphi, and affinity estimation. 

This course also covers requirements prioritization methods and other Agile project management activities you perform when completing your release plan.

This course is one of a series in the Skillsoft learning path that covers the objectives for the PMI Agile Certified Practitioner (PMI-ACP)Â® exam. PMI-ACP is a registered mark of the 
Project Management Institute, Inc.


--------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Objectives
------------
. identify key considerations for Agile project scoping

. identify best practices for creating personas as part of requirements definition

. identify wireframing best practices for formatting user stories

. identify benefits of story mapping

. recognize Agile estimating techniques

. identify considerations to keep in mind when estimating team velocity

. recognize different customer-valued prioritization methods

. identify the four MoSCoW model categories

. recognize characteristics of Kano models and priority matrices

. identify the key activities that take place in the iteration planning meeting


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Agile Project Planning
------------------------
Agile project planning involves establishing the proper project requirements, conditions of satisfaction, and priorities.

This course covers how to create and prioritize user stories. A key activity for clearly defining customer-centric requirements and features.

You'll also learn about agile estimating techniques, estimating team velocity, and prioritizing user stories and requirements.


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Defining Project Scope and Roadmap
------------------------------------
Two key planning stages in Agile are 

	. release planning and 
	. iteration planning.

At the release planning level, we define the plan for delivering a certain increment of product or business value by a target release date.

Release planning helps stakeholders start to set expectations on what they can start to see within each iteration as they approach the final release.

The key tasks of release planning include:

	. establishing project goals
	. creating user stories
	. prioritizing stories so that the team and stakeholders identify what must be developed
	. estimating stories
	. grouping stories, and 
	. setting a release date.

Iteration planning is sometimes referred to as sprint planning. It defines specific goals for the team in the next iteration.

The key tasks of iteration planning are:

	. confirming user stories and priorities for the next sprint
	. decomposing selected stories into tasks
	. refining estimates and
	. updating requirements if needed and based on new learning.

In Agile planning, we have the concept of the cone of uncertainty.

	Essentially the concept is that there is a decrease of variance overtime and estimates. So as we move forward in a project, we have last project unknowns and our estimates versus 
	actual start to approach each other, and become closer until there is no variance between them.

	Estimates may have been created using historical project data. They're used to create a high to low estimate range, and they vary depending on the type of project.

In Agile planning, we also have the concept of progressive elaboration.

	Progressive elaboration means that the project plan is continuously and constantly modified, detailed and improved.

	Progressive elaboration helps us account for changes in scope or requirements or even priorities.

	Progressive elaboration is performed throughout the project life cycle and it allows the project to be managed to a greater level of detail.

	So as the project evolves, we're actually able to manage better, because we understand more detail about the requirements, about the users and about how they're going to use our 
	product.

In the context of Agile projects, scope is defined as the extent of the work that needs to be completed in order for our project to be considered complete.

	Overtime, scope usually increases. 

	Scope is likely to change over the course of a project because requirements change and because requirements are refined as the project progresses.

	In Agile, we understand and acknowledge this fact. And we don't try to run away from the idea that scope may change as our project progresses.

	When we incorporate learning and feedback, we actually can create better products. Ultimately our goal is to create the best products for our end users and for our stakeholders.

	Scope can be controlled by continually maximizing value for the customer, such as by minimizing waste and increasing effectiveness of teams.

Scope creep is another concept in project management.

	Scope creep is uncontrolled change to a project which can result in delays or higher costs.

	Scope creep should not be confused with controlled change, which is accepted and even encouraged if it adds value for the customer.

	We must avoid scope creep by introducing change in a managed way that considers the impact to other parts of the project and is agreed to by the customer and key stakeholders.

	So what do we do if our budget and schedule are fixed, but we want to introduce a new feature or requirement? We may decide to sacrifice a less valuable feature to make room in 
	the budget and schedule for this one. This is one way to prevent scope creep.

In summary, two key planning stages in Agile are release planning and iteration planning.

* The key tasks of release planning include, 
	. establishing project goals,
	. creating user stories, 
	. prioritizing stories so that the team and stakeholders identify what must be developed, 
	. estimating stories,
	. grouping stories and setting a release date.

* The key tasks of iteration planning are, 
	. confirming user stories and priorities for the next sprint,
	. decomposing selected stories into tasks, 
	. refining estimates and
	. updating requirements if needed and based on new learning.


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Use Cases and Personas
------------------------
* Use cases are common in both software and system engineering and they're part of defining requirements.

	Use cases describe a sequence of activities that provide measurable value to an actor who represents the user.

	You may think of use cases as different scenarios.

	So for example, one use case may be where a user already has an account on the system.

	What happens then?

	Another use case may be where a user is trying to use our system, but they haven't yet established an account.

In this context, actors represent the roles that users may have in relation to a system.

So actors may be persons, organizations, or external systems.

A person may be a user who directly uses the software.

An organization may be an organization that benefits from some reporting or some other feature of the software.

And an external system may be the recipient of some data that our software is sending to it.

	* We use personas in Agile projects as a way to define examples of typical users of our systems.

		They should be concise and visual.

		When we develop personas, we think about certain things such as providing a name, a personality, what their motivation is to use our software, providing professional 
		details, how much they use the technology,etc., and potentially a picture of that person.

		It helps teams to identify personas and to start to create a relationship with them, in order to understand their mindset as they're using our software.

		It may seem interesting to go into details of these personas, however they actually really do help us understand how users are going to use our system, and what things 
		they may be taking into consideration as they'reinteracting with it.

		We may want to use or create more than one persona.

		We implement personas in order to understand exactly what a product may need to do in different scenarios, and how it may need to react when providing different inputs 
		from different personas.

		Creating personas may require community research.

		So, for example, we may have to conduct some focus groups.

		We may have to talk to potential users or even customer support, since they really understand some of the struggles that our users currently have, and product managers, 
		since a part of their job is to understand our customers.

		In order to write effective personas, we don't want to make up personas that don't actually exist.

		We want to base our personas on reality. They should be based on who will actually use and benefit from our software. We also want to develop specific personas sowe want 
		to be able to differentiate between the different personas.

		We also want to define the persona goals.

		Why would they use our system? We may also consider negative personas. If there were some personas that would want our system to fail, or wouldn't want to use our product, 
		what would their motivations and reasons be?

		We may consider creating primary personas and then some secondary ones.

		The primary personas are the ones that will really drive our decision-making in our understanding of the user.

* In summary, use cases and personas help you define requirements. When creating personas, best practices include, basing them on reality, being specific, defining persona goals, including
negative personas, and creating primary and secondary personas.


------------------------------------------------------------------------------------------------------------------------------------------------------------------




											          







































